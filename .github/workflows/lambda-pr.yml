name: My Lambda PR

on:
  pull_request:
    branches:
      - master
jobs:
  build_and_deploy:
    name: Build -> Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        working-directory: infrastructure/development
        run: terraform init
          -var stage="development"
          -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}"
          -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      - name: Terraform Plan
        id: plan
        working-directory: infrastructure/development
        # if: github.event_name == 'pull_request'
        run: terraform plan
          -var stage="development"
          -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}"
          -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        working-directory: infrastructure
        run: terraform apply -auto-approve
          -var stage="development"
          -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}"
          -var "aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      - name: Deploy Cloud Functions
        working-directory: functions
        run: npm i && npx serverless deploy -s test-branch-deployments
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
